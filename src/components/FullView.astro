---
---
<div class="checkbox-wrap">
  <input type="checkbox" id="hideSidebar">
  <label for="hideSidebar">Hide Nav</label>  
</div>

<div class="checkbox-wrap">
  <input type="checkbox" id="hideToC">
  <label for="hideToC">Hide ToC</label>
</div>

<style>
  .checkbox-wrap {
    display: none;
    position: relative;
  }

  .checkbox-wrap input[type="checkbox"] {
    position: absolute;
    opacity: 0;
  }

  .checkbox-wrap label {
    white-space: nowrap;
    padding: var(--space-2xs);
    border-radius: var(--border-radius);
    border: 1px solid var(--sl-color-gray-5);
  }

  .checkbox-wrap label:hover {
    cursor: pointer;
  }

input[type="checkbox"]:checked ~ label {
  color: var(--sl-color-text-accent);
  font-weight: 600;
  border: 1px solid var(--sl-color-accent);
}

.checkbox-wrap input[type="checkbox"]:focus-visible + label {
  outline: 2px solid var(--sl-color-accent);
}

  @media screen and (min-width:72rem) {
    .checkbox-wrap {
      display: block;
    }
  }
</style>


<script>
const hideSidebar = document.getElementById('hideSidebar') as HTMLInputElement;
const sidebar = document.querySelector<HTMLElement>('.sidebar');
const mainFrame = document.querySelector<HTMLElement>('.main-frame');
const hideToC = document.getElementById('hideToC') as HTMLInputElement;
const rightSidebarPanel = document.querySelector<HTMLElement>('.right-sidebar-container');
const mainPane = document.querySelector<HTMLElement>('.main-pane');
const tocCollapseWidth = window.matchMedia("(max-width: 72rem)");
const updateClass = () => {
  if (hideSidebar.checked || hideToC.checked) {
    mainPane?.classList.add('full-view');
  } else {
    mainPane?.classList.remove('full-view');
  }
}


tocCollapseWidth.addEventListener("change", (e: MediaQueryListEvent) => {
  if (sidebar && mainFrame && mainPane && rightSidebarPanel && hideSidebar && hideToC) {
    if (e.matches) {
      hideSidebar.checked = false;
      hideToC.checked = false;
      rightSidebarPanel.style.display = 'revert';
      mainPane.style.setProperty('--sl-sidebar-width', 'revert');
      sidebar.style.display = 'revert';
      mainFrame.style.setProperty('--sl-content-inline-start', 'revert');
      mainPane.classList.remove('full-view');
    } else {
      mainPane.style.removeProperty('width');
    }
  } 
});

hideSidebar?.addEventListener('change', (e) => {
  if (sidebar && mainFrame && mainPane) {
		if ((e.target as HTMLInputElement).checked) {
			sidebar.style.display = 'none';
			mainFrame.style.setProperty('--sl-content-inline-start', '0rem');
      mainPane.style.width = '100%';
		} else {
			sidebar.style.display = 'block';
			mainFrame.style.setProperty('--sl-content-inline-start', 'revert');
      mainPane.style.removeProperty('width');
		}
	}
  updateClass();
});

hideToC?.addEventListener('change', (e) => {
	if (rightSidebarPanel && mainPane) {
		if ((e.target as HTMLInputElement).checked) {
			rightSidebarPanel.style.display = 'none';
			mainPane.style.setProperty('--sl-sidebar-width', '0rem');
		} else {
			rightSidebarPanel.style.display = 'block';
			mainPane.style.setProperty('--sl-sidebar-width', '14rem');
		}
	}
  updateClass();
});
</script>
